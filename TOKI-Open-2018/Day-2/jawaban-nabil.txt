2A:
#include "tile.h"

#include <vector>
#include <bits/stdc++.h>

typedef int_fast64_t ll;

using namespace std;

int n, k, q, m;
vector<int> a;
vector<int> dp;

void init(int N, int K, int Q, int M, std::vector<int> A) {
    n = N;
    k = K;
    q = Q;
    m = M;
    a = A;

    dp.resize(m);

    for (int i = 0; i < m; i++) {
        // Cari posisi terkanan yang bakal masuk ke dalem grup dia
        for (int li = i, ri = m - 1, mid; li <= ri; ) {
            mid = (li + ri) / 2;
            if (a[mid] < a[i] + k) {
                dp[i] = mid;
                li = mid + 1;
            }
            else ri = mid - 1;
        }
    }

    /*
    for (auto i:dp)
        cout << i << " ";
    cout << "\n";
    */
}

int getNumberOfSpecialTiles(int L, int R) {
    // Pertama binser cari tiles terkiri dan terkanan yang masuk
    // dalam l dan r
    ll li = 0, ri = m - 1, mid, lpos = m, rpos = -1;
    while (li <= ri) {
        mid = (li + ri) / 2;
        if (a[mid] >= L) {
            lpos = mid;
            ri = mid - 1;
        }
        else li = mid + 1;
    }

    li = 0, ri = m - 1;
    while (li <= ri) {
        mid = (li + ri) / 2;
        if (a[mid] <= R) {
            rpos = mid;
            li = mid + 1;
        }
        else ri = mid - 1;
    }

    //cout << lpos << " " << rpos << " " << L << " " << R << " lrlr\n";

    if (lpos > rpos) // Artinya nggak ada apa apa
        return 0;

    if ((R  - L + 1) <= k)
        return 1;

    int ans = 0;
    for (int i = lpos; i <= rpos; ) {
        i = dp[i] + 1;
        ans++;
    }

    return ans;
}

2B:
#include "tour.h"

#include <string>
#include <vector>

int getShortestTour(int N, std::vector<std::string> S) {
  return 0;
}

2C:
#include "tetris.h"

#include <string>
#include <vector>

std::vector<int> arrangeTetrominoes(int N, std::string S, int Q) {
  std::vector<int> ans;
  return ans;
}
